# -*- coding: utf-8 -*-
"""PizzaOrderingSys_LLD.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1RYDtWA3gDiYkrHM34_t6rOA-nQFW1MSU
"""

class Topping:
    def __init__(self, name: str, price: float):
        self.name = name
        self.price = price


class Pizza:
    SIZE_PRICES = {
        'small': 8.00,
        'medium': 10.00,
        'large': 12.00
    }

    def __init__(self, size: str):
        if size not in self.SIZE_PRICES:
            raise ValueError("Invalid pizza size")
        self.size = size
        self.toppings = []

    def add_topping(self, topping: Topping):
        self.toppings.append(topping)

    def calculate_cost(self) -> float:
        base_cost = self.SIZE_PRICES[self.size]
        toppings_cost = sum(topping.price for topping in self.toppings)
        return base_cost + toppings_cost


class Order:
    def __init__(self, tax_rate: float):
        self.pizzas = []
        self.tax_rate = tax_rate

    def add_pizza(self, pizza: Pizza):
        self.pizzas.append(pizza)

    def calculate_total_cost(self) -> float:
        total_cost = sum(pizza.calculate_cost() for pizza in self.pizzas)
        total_cost_with_tax = total_cost * (1 + self.tax_rate)
        return total_cost_with_tax


class PizzaOrderingSystem:
    def __init__(self):
        self.orders = []
        self.toppings = [
            Topping("Pepperoni", 1.50),
            Topping("Mushrooms", 1.00),
            Topping("Olives", 0.75),
            Topping("Onions", 0.50),
            Topping("Sausage", 1.75),
            Topping("Bacon", 2.00),
            Topping("Extra cheese", 1.25)
        ]

    def create_order(self, tax_rate: float) -> Order:
        order = Order(tax_rate)
        self.orders.append(order)
        return order

    def add_pizza_to_order(self, order: Order, pizza: Pizza):
        order.add_pizza(pizza)

    def get_order_total(self, order: Order) -> float:
        return order.calculate_total_cost()

    def display_toppings(self):
        print("Available toppings:")
        for i, topping in enumerate(self.toppings, start=1):
            print(f"{i}. {topping.name} - ${topping.price:.2f}")

    def run(self):
        while True:
            order_choice = input("Do you want to order pizza? (Y/N): ").strip().upper()
            if order_choice != 'Y':
                print("Thank you for using the Pizza Ordering System!")
                break

            tax_rate = 0.10  # 10% tax
            order = self.create_order(tax_rate)

            while True:
                size = input("Select pizza size (small, medium, large): ").strip().lower()
                try:
                    pizza = Pizza(size)
                except ValueError as e:
                    print(e)
                    continue

                self.display_toppings()
                while True:
                    topping_choice = input("Do you want to add a topping? (Y/N): ").strip().upper()
                    if topping_choice == 'Y':
                        topping_index = int(input("Select topping by number: ")) - 1
                        if 0 <= topping_index < len(self.toppings):
                            pizza.add_topping(self.toppings[topping_index])
                        else:
                            print("Invalid topping selection.")
                    elif topping_choice == 'N':
                        break
                    else:
                        print("Invalid choice. Please enter Y or N.")

                self.add_pizza_to_order(order, pizza)

                another_pizza = input("Do you want to add another pizza to the order? (Y/N): ").strip().upper()
                if another_pizza != 'Y':
                    break

            total_cost = self.get_order_total(order)
            print(f"Total cost of the order (including tax): ${total_cost:.2f}")


# Example Usage
if __name__ == "__main__":
    system = PizzaOrderingSystem()
    system.run()

