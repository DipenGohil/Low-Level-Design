# -*- coding: utf-8 -*-
"""ParkingLot_LLD.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1sRjzLVLBD_sJ51ou2Qlqs6liZHt9W_vZ
"""

import time
from datetime import datetime

class Vehicle:
    def __init__(self, vehicle_type, license_plate):
        self.vehicle_type = vehicle_type  # 1 for bike, 2 for car, 3 for truck
        self.license_plate = license_plate
        self.entry_time = None

    def park(self):
        self.entry_time = datetime.now()

    def __str__(self):
        return f"{self.license_plate} (Type: {self.vehicle_type})"

class ParkingSpace:
    def __init__(self, space_type):
        self.space_type = space_type  # 1 for bike, 2 for car, 3 for truck
        self.occupied = False
        self.vehicle = None

    def park_vehicle(self, vehicle):
        if not self.occupied and self.space_type == vehicle.vehicle_type:
            self.occupied = True
            self.vehicle = vehicle
            vehicle.park()
            return True
        return False

    def remove_vehicle(self):
        if self.occupied:
            vehicle = self.vehicle
            self.occupied = False
            self.vehicle = None
            return vehicle
        return None

class Floor:
    def __init__(self, floor_number, parking_spaces):
        self.floor_number = floor_number
        self.parking_spaces = [[ParkingSpace(space_type) for space_type in row] for row in parking_spaces]

    def park_vehicle(self, vehicle):
        for row in self.parking_spaces:
            for space in row:
                if space.park_vehicle(vehicle):
                    return True
        return False

    def remove_vehicle(self, vehicle):
        for row in self.parking_spaces:
            for space in row:
                if space.occupied and space.vehicle.license_plate == vehicle.license_plate:
                    return space.remove_vehicle()
        return None

    def display_status(self):
        for row in self.parking_spaces:
            for space in row:
                status = "Occupied" if space.occupied else "Free"
                print(f"Space Type: {space.space_type}, Status: {status}")

    def count_free_spaces(self):
        free_count = sum(1 for row in self.parking_spaces for space in row if not space.occupied)
        return free_count

class Ticket:
    def __init__(self, ticket_id, vehicle):
        self.ticket_id = ticket_id
        self.vehicle = vehicle
        self.issue_time = vehicle.entry_time

    def calculate_cost(self):
        parked_duration = datetime.now() - self.issue_time
        hours_parked = 5 #parked_duration.total_seconds() / 3600
        cost = 0
        if self.vehicle.vehicle_type == 1:  # Bike
            cost = hours_parked * 2  # $2 per hour
        elif self.vehicle.vehicle_type == 2:  # Car
            cost = hours_parked * 5  # $5 per hour
        elif self.vehicle.vehicle_type == 3:  # Truck
            cost = hours_parked * 10  # $10 per hour
        return round(cost, 2)

class ParkingLot:
    def __init__(self, parking_spaces):
        self.floors = []
        self.tickets = {}  # Dictionary to store tickets by ticket ID
        self.ticket_counter = 1  # Initialize ticket ID counter
        for floor_number, floor_spaces in enumerate(parking_spaces):
            self.floors.append(Floor(floor_number, floor_spaces))

    def park_vehicle(self, vehicle):
        for floor in self.floors:
            if floor.park_vehicle(vehicle):
                ticket_id = self.ticket_counter  # Get the current ticket ID
                self.ticket_counter += 1  # Increment the ticket ID counter
                ticket = Ticket(ticket_id, vehicle)
                self.tickets[vehicle.license_plate] = (ticket_id, ticket, vehicle)  # Store ticket by license plate
                return ticket_id  # Return the ticket ID
        return None

    def unpark_vehicle(self, vehicle):
        for floor in self.floors:
            parked_vehicle = floor.remove_vehicle(vehicle)
            print("parked ", parked_vehicle.license_plate)
            if parked_vehicle:
                ticket = self.tickets[parked_vehicle.license_plate][1]
                cost = ticket.calculate_cost()
                del self.tickets[parked_vehicle.license_plate]  # Remove ticket from records
                return cost
        return None

    def display_free_spaces(self):
        for floor in self.floors:
            free_spaces = floor.count_free_spaces()
            print(f"Floor {floor.floor_number} has {free_spaces} free spaces.")

    def search_vehicle_by_ticket_id(self, ticket_id):
        vehicle = self.tickets.get(ticket_id)
        if vehicle:
            return f"Vehicle found: {vehicle}"
        return "Vehicle not found."

    def search_vehicle_by_license_plate(self, license_plate):
        for floor in self.floors:
            for row in floor.parking_spaces:
                for space in row:
                    if space. occupied and space.vehicle.license_plate == license_plate:
                        return f"Vehicle found: {space.vehicle}"
        return "Vehicle not found."

# Example Usage
if __name__ == "__main__":
    parking_spaces = [
        [
            [1, 1, 0, 2],
            [2, 2, 2, 0],
            [0, 2, 1, 1],
            [1, 0, 2, 0]
        ],
        [
            [3, 2, 0, 2],
            [2, 0, 0, 0],
            [0, 2, 0, 1],
            [1, 0, 1, 0]
        ]
    ]

    parking_lot = ParkingLot(parking_spaces)

    # Display initial free spaces
    parking_lot.display_free_spaces()

    # Park a vehicle
    bike = Vehicle(1, "B123")
    car = Vehicle(2, "C456")
    truck = Vehicle(3, "T789")

    bike_ticket_id = parking_lot.park_vehicle(bike)
    car_ticket_id = parking_lot.park_vehicle(car)
    truck_ticket_id = parking_lot.park_vehicle(truck)

    # Search for vehicles
    print(parking_lot.search_vehicle_by_ticket_id(bike_ticket_id))
    print(parking_lot.search_vehicle_by_license_plate("C456"))

    # Display free spaces after parking
    parking_lot.display_free_spaces()

    bike_cost = parking_lot.unpark_vehicle(bike)
    car_cost = parking_lot.unpark_vehicle(car)

    print(f"Cost for bike: ${bike_cost:.2f}")
    print(f"Cost for car: ${car_cost:.2f}")

    # Display free spaces after parking
    parking_lot.display_free_spaces()

    # Park a vehicle
    bike1 = Vehicle(1, "FB444")
    car2 = Vehicle(2, "C9426")
    truck3 = Vehicle(3, "AM123")

    bike_ticket_id = parking_lot.park_vehicle(bike1)
    car_ticket_id = parking_lot.park_vehicle(car2)
    truck_ticket_id = parking_lot.park_vehicle(truck3)

    # Display free spaces after parking
    # parking_lot.display_free_spaces()

