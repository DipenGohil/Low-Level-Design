# -*- coding: utf-8 -*-
"""UnixFileSearchAPI_LLD.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1RN4OGtnheDXVj_aJO7Y_JTAJO0nhGrs6
"""

from abc import ABC, abstractmethod
from typing import List, Union

# File class to represent a file
class File:
    def __init__(self, name: str, extension: str, size: int):
        self.name = name
        self.extension = extension
        self.size = size

    def get_name(self) -> str:
        return self.name

    def get_extension(self) -> str:
        return self.extension

    def get_size(self) -> int:
        return self.size

# Specification interface
class Specification(ABC):
    @abstractmethod
    def is_satisfied_by(self, file: File) -> bool:
        pass

# Concrete specifications
class ExtensionSpecification(Specification):
    def __init__(self, extension: str):
        self.extension = extension

    def is_satisfied_by(self, file: File) -> bool:
        return file.get_extension() == self.extension

class NameSpecification(Specification):
    def __init__(self, name: str):
        self.name = name

    def is_satisfied_by(self, file: File) -> bool:
        return file.get_name() == self.name

class SizeSpecification(Specification):
    def __init__(self, size: int):
        self.size = size

    def is_satisfied_by(self, file: File) -> bool:
        return file.get_size() >= self.size

# Composite specifications
class AndSpecification(Specification):
    def __init__(self, *specifications: Specification):
        self.specifications = specifications

    def is_satisfied_by(self, file: File) -> bool:
        return all(spec.is_satisfied_by(file) for spec in self.specifications)

class OrSpecification(Specification):
    def __init__(self, *specifications: Specification):
        self.specifications = specifications

    def is_satisfied_by(self, file: File) -> bool:
        return any(spec.is_satisfied_by(file) for spec in self.specifications)

# Function to search files based on specifications
def search_files(files: List[File], spec: Specification) -> List[File]:
    return [file for file in files if spec.is_satisfied_by(file)]

# Example usage
if __name__ == "__main__":
    files = [
        File("document1.txt", "txt", 4000),
        File("image1.png", "png", 2000),
        File("document2.md", "md", 3000),
        File("document3.txt", "txt", 5000)
    ]

    # Create specifications
    txt_spec = ExtensionSpecification("txt")
    size_spec = SizeSpecification(2000)

    # Combine specifications with AND
    and_spec = AndSpecification(txt_spec, size_spec)

    # Search files
    results = search_files(files, and_spec)

    # Output results
    for file in results:
        print(f"Found file: {file.get_name()} (Size: {file.get_size()} bytes)")

