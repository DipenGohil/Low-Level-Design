# -*- coding: utf-8 -*-
"""MovieTicketBooking_LLD.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ojYNuUn49CNTnEOXBxeGGfkFO1KfPrKZ
"""

class Seat:
    def __init__(self, row, column):
        self.row = row
        self.column = column
        self.is_booked = False
        self.show = None  # Initialize show as None

    def assign_show(self, show):
        self.show = show  # Method to assign a show to the seat


class MovieShow:
    def __init__(self, id, movie_name, screen_id, show_time, ticket_price):
        self.id = id
        self.movie_name = movie_name
        self.screen_id = screen_id
        self.show_time = show_time
        self.ticket_price = ticket_price  # New attribute for ticket price


class Screen:
    def __init__(self, id, rows, columns):
        self.id = id
        self.rows = rows
        self.columns = columns
        self.seats = [[Seat(row, column) for column in range(columns)] for row in range(rows)]
        self.shows = []  # List to hold shows for this screen

    def add_show(self, show):
        self.shows.append(show)
        # Assign the show to all seats in this screen
        for row in self.seats:
            for seat in row:
                seat.assign_show(show)

    def get_continuous_seats(self, row, num_seats):
        continuous_seats = []
        for column in range(self.columns):
            if not self.seats[row][column].is_booked:
                continuous_seats.append(self.seats[row][column])
                if len(continuous_seats) == num_seats:
                    return continuous_seats
            else:
                continuous_seats = []  # Reset if a seat is booked
        return None

    def book_seats(self, show_id, num_seats):
        # Try to book continuous seats from the same row
        for row in range(self.rows):
            continuous_seats = self.get_continuous_seats(row, num_seats)
            if continuous_seats:
                for seat in continuous_seats:
                    seat.is_booked = True
                total_cost = len(continuous_seats) * continuous_seats[0].show.ticket_price  # Calculate total cost
                return continuous_seats, total_cost

        # If continuous seats are not available, pick seats from lowest row, column
        seats = []
        for row in range(self.rows):
            for column in range(self.columns):
                if not self.seats[row][column].is_booked and self.seats[row][column].show.id == show_id:
                    seats.append(self.seats[row][column])
                    if len(seats) == num_seats:
                        for seat in seats:
                            seat.is_booked = True
                        total_cost = len(seats) * seats[0].show.ticket_price  # Calculate total cost
                        return seats, total_cost

        return None, 0  # Return 0 cost if no seats are available

    def cancel_booking(self, show_id, seats):
        for seat in seats:
            if seat.show.id == show_id:  # Ensure the seat belongs to the correct show
                seat.is_booked = False

    def available_seats_count(self):
        count = 0
        for row in self.seats:
            for seat in row:
                if not seat.is_booked:
                    count += 1
        return count


class Cinema:
    def __init__(self, id, name, location):
        self.id = id
        self.name = name
        self.location = location
        self.screens = []

    def add_screen(self, screen):
        self.screens.append(screen)


class BookingSystem:
    def __init__(self):
        self.cinemas = []

    def add_cinema(self, cinema):
        self.cinemas.append(cinema)

    def add_show(self, cinema_id, screen_id, show):
        cinema = next((cinema for cinema in self.cinemas if cinema.id == cinema_id), None)
        if cinema:
            screen = next((screen for screen in cinema.screens if screen.id == screen_id), None)
            if screen:
                screen.add_show(show)

    def book_seats(self, cinema_id, screen_id, show_id, num_seats):
        cinema = next((cinema for cinema in self.cinemas if cinema.id == cinema_id), None)
        if cinema:
            screen = next((screen for screen in cinema.screens if screen.id == screen_id), None)
            if screen:
                booked_seats, total_cost = screen.book_seats(show_id, num_seats)
                return booked_seats, total_cost
        return None, 0  # Return 0 cost if booking fails

    def cancel_booking(self, cinema_id, screen_id, show_id, seats):
        cinema = next((cinema for cinema in self.cinemas if cinema.id == cinema_id), None)
        if cinema:
            screen = next((screen for screen in cinema.screens if screen.id == screen_id), None)
            if screen:
                screen.cancel_booking(show_id, seats)

    def display_available_seats(self):
        for cinema in self.cinemas:
            print(f"Cinema: {cinema.name}, Location: {cinema.location}")
            for screen in cinema.screens:
                for show in screen.shows:
                    available_seats = screen.available_seats_count()
                    print(f"  Show: {show.movie_name} at {show.show_time} - Available Seats: {available_seats}")


# Example Usage
if __name__ == "__main__":
    # Create a cinema
    cinema = Cinema(1, "Cineplex", "Downtown")

    # Create a screen with 5 rows and 10 columns
    screen = Screen(1, 5, 10)
    cinema.add_screen(screen)

    # Create a movie show
    show = MovieShow(1, "Avengers: Endgame", screen.id, "2023-10-01 19:00", 10.0)

    # Add the show to the screen
    booking_system = BookingSystem()
    booking_system.add_cinema(cinema)
    booking_system.add_show(cinema.id, screen.id, show)

    # Book seats
    booked_seats, total_cost = booking_system.book_seats(cinema.id, screen.id, show.id, 3)
    if booked_seats:
        print(f"Booked seats: {[f'Row {seat.row}, Column {seat.column}' for seat in booked_seats]}")
        print(f"Total cost: ${total_cost}")
    else:
        print("No seats available for booking.")

    # Display available seats
    booking_system.display_available_seats()

    # Cancel booking
    booking_system.cancel_booking(cinema.id, screen.id, show.id, booked_seats)
    print("Booking canceled.")
    # Display available seats again after cancellation
    booking_system.display_available_seats()

