# -*- coding: utf-8 -*-
"""SnakeAndLadders_LLD.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15iboVTy9pdzZ8EucKL3OtoHgngbeMNLs
"""

import random
from typing import List, Dict, Optional

class Cell:
    def __init__(self, number: int):
        self.number = number

class Snake:
    def __init__(self, head: int, tail: int):
        self.head = head
        self.tail = tail

class Ladder:
    def __init__(self, bottom: int, top: int):
        self.bottom = bottom
        self.top = top

class Board:
    def __init__(self):
        self.cells: Dict[int, Cell] = {i: Cell(i) for i in range(1, 101)}
        self.snakes: List[Snake] = []
        self.ladders: List[Ladder] = []
        self.setup_board()

    def setup_board(self) -> None:
        # Randomly place ladders
        for _ in range(5):  # Example: 5 ladders
            bottom = random.randint(1, 90)  # Bottom must be less than 91
            top = random.randint(bottom + 1, 100)  # Top must be greater than bottom
            self.ladders.append(Ladder(bottom, top))

        # Randomly place snakes
        for _ in range(5):  # Example: 5 snakes
            head = random.randint(11, 99)  # Head must be greater than 10
            tail = random.randint(1, head - 1)  # Tail must be less than head
            self.snakes.append(Snake(head, tail))

    def get_destination(self, cell_number: int) -> int:
        for ladder in self.ladders:
            if ladder.bottom == cell_number:
                return ladder.top
        for snake in self.snakes:
            if snake.head == cell_number:
                return snake.tail
        return cell_number

class Player:
    def __init__(self, name: str):
        self.name = name
        self.position = 1  # Start at cell 1

    def roll_dice(self) -> int:
        return random.randint(1, 6)

    def move(self, steps: int) -> None:
        self.position += steps
        if self.position > 100:
            self.position = 100  # Cap at 100

class Game:
    def __init__(self):
        self.players: List[Player] = []
        self.board = Board()
        self.current_player_index = 0

    def add_player(self, player: Player) -> None:
        self.players.append(player)

    def start_game(self) -> None:
        while True:
            self.next_turn()
            winner = self.check_winner()
            if winner:
                print(f"{winner.name} wins!")
                break

    def next_turn(self) -> None:
        current_player = self.players[self.current_player_index]
        print(f"{current_player.name}'s turn.")
        steps = current_player.roll_dice()
        print(f"Rolled: {steps}")
        self.move_player(current_player, steps)
        self.current_player_index = (self.current_player_index + 1) % len(self.players)

    def move_player(self, player: Player, steps: int) -> None:
        player.move(steps)
        player.position = self.board.get_destination(player.position)
        print(f"{player.name} moved to {player.position}")

    def check_winner(self) -> Optional[Player]:
        for player in self.players:
            if player.position == 100:
                return player
        return None

def main():
    # Create a new game instance
    game = Game()

    # Add players to the game
    player_names = ["Alice", "Bob"]
    for name in player_names:
        player = Player(name)
        game.add_player(player)

    # Start the game
    game.start_game()

if __name__ == "__main__":
    main()