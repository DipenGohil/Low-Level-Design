# -*- coding: utf-8 -*-
"""TextEditor_LLD.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15eVbkxsm_Byjsa_2eJa_su4Lf1NMmBEK
"""

class Solution:
    def __init__(self):
        self.helper = None
        self.document = {}  # Stores rows of the document as a dictionary
        self.style_map = {}  # Maps (row, column) to style strings

    def init(self, helper):
        self.helper = helper

    def add_character(self, row, column, ch, font_name, font_size, is_bold, is_italic):
        # Ensure the row exists
        if row not in self.document:
            self.document[row] = []

        # Fill gaps in the row with spaces if necessary
        row_content = self.document[row]
        while len(row_content) <= column:
            row_content.append(' ')

        # Insert the character at the specified position
        row_content.insert(column, ch)

        # Construct the style string
        style = f"{ch}-{font_name}-{font_size}"
        if is_bold:
            style += "-b"
        if is_italic:
            style += "-i"

        # Update the style map
        self.style_map[(row, column)] = style

        # Adjust styles for shifted characters
        for col in range(column + 1, len(row_content)):
            if (row, col - 1) in self.style_map:
                self.style_map[(row, col)] = self.style_map.pop((row, col - 1))

    def get_style(self, row, col):
        # Return the style if it exists, otherwise return an empty string
        return self.style_map.get((row, col), "")

    def read_line(self, row):
        # Return the row content as a string or an empty string if the row doesn't exist
        if row not in self.document:
            return ""
        return "".join(self.document[row]).rstrip()

    def delete_character(self, row, col):
        # Check if the character exists
        if row not in self.document or col >= len(self.document[row]):
            return False

        # Remove the character from the row
        self.document[row].pop(col)

        # Remove the style for this character
        self.style_map.pop((row, col), None)

        # Update the styles for characters to the right
        for col_index in range(col, len(self.document[row])):
            if (row, col_index + 1) in self.style_map:
                self.style_map[(row, col_index)] = self.style_map.pop((row, col_index + 1))

        return True

solution = Solution()
solution.init(None)
solution.add_character(0, 0, 'g', 'Cambria', 17, True, True)
solution.add_character(1, 0, 'y', 'Century Gothic', 14, True, True)
solution.add_character(1, 1, 'h', 'Courier New', 22, False, False)
solution.add_character(1, 2, 'y', 'Georgia', 14, False, False)

print(solution.get_style(0, 0))  # Output: "g-Cambria-17-b-i"
print(solution.read_line(0))    # Output: "g"
solution.add_character(0, 0, 'q', 'Arial', 21, False, True)
print(solution.read_line(0))    # Output: "qg"

print(solution.read_line(1))    # Output: "yhy"
print(solution.delete_character(1, 1))  # Output: True
print(solution.read_line(1))    # Output: "yy"
print(solution.delete_character(1, 4))  # Output: False

